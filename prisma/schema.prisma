// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String   // This will be the hashed password
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationCodes {
  id String @id @default(uuid())
  email String
  code String @unique
  createdAt DateTime @default(now())
  expiry    DateTime @default(dbgenerated("now() + interval '10 minutes'"))
}

enum CurrentSituation {
  homeowner
  rented
  livingAtHomeOrWithFriends
}

enum MaritalStatus {
  single
  marriedOrPartner
}

enum PassportStatus {
  valid
  expired
  none
}

enum EmploymentStatus {
  fullTime
  partTime
  seekingEmployment
  unemployed
  retired
  selfEmployed
}

model RentalApplication {
  id                      String             @id @default(uuid())
  // Property & Rental Details
  propertyAddress         String
  rentalAmount            Float
  moveInDate              DateTime

  // Personal Details
  fullName                String
  currentAddress          String
  postCode                String
  timeAtAddress           String
  telephoneNumber         String
  emailAddress            String
  dateOfBirth             DateTime

  // Previous Addresses (one-to-many relation)
  previousAddresses       PreviousAddress[]

  // Living Situation
  currentSituation        CurrentSituation
  landlordDetails         LandlordDetails?   // Optional one-to-one relation

  // Household Information
  maritalStatus           MaritalStatus
  householdDetails        String

  // Pets & Smoking
  pets                    String?
  smoker                  Boolean
  allowInspection         Boolean

  // Moving & Document Proofs
  reasonForMoving         String
  idFileKey String
  proofOfAddressFileKey String
  bankStatementsFileKey String

  // Employment Details
  employmentStatus        EmploymentStatus
  workHours               Int

  // Employed Section (if applicable)
  employedDetails         EmployedDetails?
  // Previous Employer Details (if applicable)
  previousEmployer        PreviousEmployer?
  // Self-Employed Section (if applicable)
  selfEmployedDetails     SelfEmployedDetails?

  // Financial & Legal Information
  countyCourtJudgements   Boolean
  countyCourtDetails      String?
  bankruptOrInsolvent     Boolean
  bankruptcyDate          DateTime?
  evicted                 Boolean
  lateRentalPayments      Boolean
  latePaymentDetails      String?

  // Guarantor Information
  guarantor               Guarantor?

  // Utilities Arrears
  utilitiesArrears        UtilitiesArrears?

  // Debts Payment
  debtsPayment            Float?

  // Next of Kin
  nextOfKin               NextOfKin?

  // Declaration
  declaration             Declaration?

  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
}

model PreviousAddress {
  id                   String             @id @default(uuid())
  address              String
  postCode             String
  timeAtAddress        String
  rentalApplicationId  String
  rentalApplication    RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model LandlordDetails {
  id                    String             @id @default(uuid())
  name                  String
  address               String
  telephone             String
  rentalApplicationId   String             @unique
  rentalApplication     RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model EmployedDetails {
  id                      String             @id @default(uuid())
  jobTitle                String
  companyName             String
  employerAddress         String
  employerPostCode        String
  employerTelephone       String
  employerEmail           String
  timeEmployed            String
  currentSalary           Float
  nationalInsuranceNumber String
  rentalApplicationId     String             @unique
  rentalApplication       RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model PreviousEmployer {
  id                      String             @id @default(uuid())
  jobTitle                String
  companyName             String
  employerAddress         String
  employerPostCode        String
  employerTelephone       String
  employerEmail           String
  timeEmployed            String
  previousSalary          Float
  rentalApplicationId     String             @unique
  rentalApplication       RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model SelfEmployedDetails {
  id                     String             @id @default(uuid())
  jobTitle               String
  companyName            String
  companyAddress         String
  rentalApplicationId    String             @unique
  rentalApplication      RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
  
  // One-to-one relations for accountant & business reference (required)
  accountant             AccountantDetails?
  businessReference      BusinessReference?
}

model AccountantDetails {
  id                      String              @id @default(uuid())
  name                    String
  address                 String
  phone                   String
  email                   String
  selfEmployedDetailsId   String              @unique
  selfEmployedDetails     SelfEmployedDetails @relation(fields: [selfEmployedDetailsId], references: [id], onDelete: Cascade)
}

model BusinessReference {
  id                      String              @id @default(uuid())
  name                    String
  address                 String
  phone                   String
  email                   String
  selfEmployedDetailsId   String              @unique
  selfEmployedDetails     SelfEmployedDetails @relation(fields: [selfEmployedDetailsId], references: [id], onDelete: Cascade)
}

model Guarantor {
  id                   String             @id @default(uuid())
  canProvide           Boolean
  name                 String?
  address              String?
  postCode             String?
  telephone            String?
  email                String?
  timeAtAddress        String?
  newAddressDetails    Json?
  signature            String?
  date                 DateTime?
  rentalApplicationId  String             @unique
  rentalApplication    RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model UtilitiesArrears {
  id                  String             @id @default(uuid())
  councilTax          Boolean
  electric            Boolean
  water               Boolean
  tvLicence           Boolean
  rentalApplicationId String             @unique
  rentalApplication   RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model NextOfKin {
  id                  String             @id @default(uuid())
  name                String
  address             String
  contactDetails      String
  relationship        String
  rentalApplicationId String             @unique
  rentalApplication   RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}

model Declaration {
  id                  String             @id @default(uuid())
  printedName         String
  signature           String
  date                DateTime
  rentalApplicationId String             @unique
  rentalApplication   RentalApplication  @relation(fields: [rentalApplicationId], references: [id], onDelete: Cascade)
}
